package com.example.board.vel01.api;

import com.example.board.vel01.base.jwt.JwtTokenProvider;
import com.example.board.vel01.domain.User;

import com.example.board.vel01.repository.UserRepository;
import com.example.board.vel01.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;


import java.util.List;

@RequiredArgsConstructor
@RestController
@RequestMapping("/user")
@Slf4j
public class userApi {


    private final JwtTokenProvider jwtTokenProvider;

    private final UserService userService;
    
    private final UserRepository userRepository;
    
    @GetMapping("/duplicate")
    public ResponseEntity<?> checkDuplicatedNickName(@RequestParam String nickName ){
    	
    	log.warn("중복된 닉네임 체크:" + nickName);
    	
    	if(userRepository.existsByNickName(nickName)) {
    		
    		log.warn("checkDuplicatedNickName message: 닉네임이 이미 존재합니다");
    		
    		return ResponseEntity.badRequest().body("닉네임이 이미 존재합니다.");
    		
    	}
    	
    	return ResponseEntity.ok().body("해당 닉네임은 사용 가능합니다.");
    }
    
    
    @GetMapping("/find")
    public List<User.Response> findAllUser(){
    	
        List<User> users = userService.findAllUser();
        
        List<User.Response> response = User.Response.toResponseList(users);
        
        return response;
    }


    @PostMapping("/sign-up")
    public ResponseEntity<?> signUpUser(@RequestBody User.Request request) {
    	
        User user = User.Request.toEntity(request);
        
        User savedUser = userService.saveUser(user);
        
        User.Response response = User.Response.toResponse(savedUser);
        
        return ResponseEntity.ok().body(response);
    }

    @PostMapping("/sign-in")
    public ResponseEntity<User.Response> signInUser(@RequestBody User.Request request) {

    	User user = userRepository.findByNickNameAndPwd(request.getNickName(), request.getPwd()); //수정 완료
    	
        String token = jwtTokenProvider.makeJwtToken(user);

        log.warn("sign-in API 요청 정보:" , user.toString());
        
        User.Response responseData = User.Response.toResponse(user);
        
        responseData.setToken(token);
        
        return ResponseEntity.ok().body(responseData);
    }
    
    }
