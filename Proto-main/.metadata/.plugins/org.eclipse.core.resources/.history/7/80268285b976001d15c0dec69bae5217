package com.example.board.vel01.domain;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "comment")
public class Comment {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column
	private Long id; // 댓글 고유 번호
	
	@Column
	@NotNull
	private String nickName;
	
	@Column
	private String content; // 내용
	
	@Column
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long PostSeq; // 게시글 번호
	
	@Column
	private String createdDate = new SimpleDateFormat("yyyy/MM/dd").format(new Date()); // 댓글 작성날짜
	
	@Getter @Setter
	@ToString
	@Builder
	@NoArgsConstructor @AllArgsConstructor
	public static class Request{
		
		private Long id; // db의 id와 맞추기 위한 용도의 id
		
		@NotBlank(message = "닉네임 공백 불가")
		@NotNull(message = "닉네임 null 불가")
		private String nickName;
		
		@NotBlank(message = "글 내용 공백 불가")
		@NotNull(message = "글 내용 null 불가")
		private String content;
		
		public static Comment toEntity(Comment.Request req) {
			return Comment.builder()
					.nickName(req.getNickName())
					.content(req.getContent())
					.build();
		}
		
	}
	
	@Getter @Setter
	@ToString
	@Builder
	@NoArgsConstructor @AllArgsConstructor
	public static class Response{
		
		private Long id;
		private String nickName;
		private String content;
		private Long PostSeq;
		private String createdDate;
		
		public static Comment.Response toResponse(Comment comment){
			return Comment.Response.builder()
					.id(comment.getId())
					.nickName(comment.getNickName())
					.content(comment.getContent())
					.PostSeq(comment.getPostSeq())
					.createdDate(comment.getCreatedDate())
					.build();
		}
		
		public static List<Comment.Response> toResponseList(List<Comment> comments){
			List<Comment.Response> commentList = new ArrayList<Comment.Response>();
			for (Comment comment : comments) {
				commentList.add(null);
			}
			
			return commentList;
		}
	}
}
