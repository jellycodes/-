package com.example.board.vel01.api;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.board.vel01.domain.Comment;
import com.example.board.vel01.repository.CommentRepository;
import com.example.board.vel01.service.CommentService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("comment")
@RequiredArgsConstructor
public class CommentController {
	
	
private final CommentRepository commentRepository;

private final CommentService commentService;
	
	// 댓글 작성 = C 
	@PostMapping("/create")
	public ResponseEntity<?> createComment(@Valid @RequestBody Comment.Request req) {
		Comment comment = Comment.Request.toEntity(req);
		comment.setCreatedDate(new SimpleDateFormat("yyyy/MM/dd").format(new Date()));
		commentService.saveComment(comment);
		
		Comment.Response res = Comment.Response.toResponse(comment);
		return ResponseEntity.ok().body(res);
	}
	
	// 댓글 전체 조회 = R 
	@GetMapping("/get")
	public ResponseEntity<?> getCommentList() {
		
		List<Comment> comments = commentService.retrieveCommentList();
		List<Comment.Response> commentList = Comment.Response.toResponseList(comments);
		
		return ResponseEntity.ok().body(commentList);
	}
	
	// 댓글 수정 = U
	@PutMapping("/update")
	public ResponseEntity<?> updateComment(@Valid @RequestBody Comment.Request req){
		Comment comment = commentRepository.findByCommentId(req.getId());
		commentService.updateComment(comment);
		
		return ResponseEntity.ok().body(comment);
	}
	
	// 댓글 삭제 = D
	@DeleteMapping("/delete")
	public ResponseEntity<?> deleteComment(@Valid @RequestBody Comment.Request req){
		Comment comment = Comment.Request.toEntity(req);
		commentService.deleteComment(comment);
		
		List<Comment> updatedComments = commentService.retrieveCommentList();
		
		List<Comment.Response> res = Comment.Response.toResponseList(updatedComments);
		
		return ResponseEntity.ok().body(res);
	}
}
