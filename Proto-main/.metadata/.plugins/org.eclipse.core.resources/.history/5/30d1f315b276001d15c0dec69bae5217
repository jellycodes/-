package com.example.board.vel01.service;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.example.board.vel01.domain.Comment;
import com.example.board.vel01.domain.Post;
import com.example.board.vel01.repository.CommentRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@RequiredArgsConstructor
@Slf4j
public class CommentService {
	
	private final CommentRepository commentRepository;
	
	// 댓글 작성 = C 
	public void saveComment(Comment comment) {
		commentRepository.save(comment);
	}
	
	// 댓글 전체 조회 = R 
	public List<Comment> getCommentList() {
		List<Comment> comments = commentRepository.findAll();
		return comments;
	}
	
	// 댓글 수정 = U
	public Comment updateComment(Comment commentEntity){
		Optional<Comment> findcomment = commentRepository.findById(commentEntity.getId());
		
		findcomment.ifPresent(comment->{
			comment.setContent(commentEntity.getContent());
			comment.setCreatedDate(new SimpleDateFormat("yyyy/MM/dd"));
			commentRepository.save(comment);
		});	
		return findcomment;
	}
	
	// 댓글 삭제 = D
	public ResponseEntity<?> deleteComment(Comment.Request req){
		Optional<Comment> comment = commentRepository.findById(req.getId());
		Comment findComment = comment.get();
		commentRepository.delete(findComment);
		List<Comment> comments = commentRepository.findAll();
		List<Comment.Response> commentList = Comment.Response.toResponseList(comments);
		
		return ResponseEntity.ok().body(commentList);
	}
	
	private void validation(final Comment commentEntity) {
		if(commentEntity == null) {
			log.warn("commentEntity cannat be null");
		throw new RuntimeException("commentEntity는 null 허용 불가");	
		}
		
		if(commentEntity.getContent() == null) {
			log.warn("Conntent == null");
		throw new RuntimeException("내용을 입력해주세요.");
		}
	};
	
	
	
	
}
